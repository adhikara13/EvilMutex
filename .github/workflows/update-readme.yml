name: Update README

on:
  push:
    branches:
      - main
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    name: Update README with Latest Stats
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'

      - name: Install dependencies
        run: |
          cd website
          npm ci

      - name: Generate statistics
        run: |
          cd website
          npm run generate
          
          # Count various statistics
          total_yaml=$(find ../signatures/ -name "*.yml" -o -name "*.yaml" | wc -l)
          total_rats=$(find ../signatures/rats/ -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
          total_trojans=$(find ../signatures/trojans/ -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
          total_ransomware=$(find ../signatures/ransomware/ -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
          total_other=$(find ../signatures/other/ -name "*.yml" -o -name "*.yaml" 2>/dev/null | wc -l)
          
          # Count mutexes from generated JSON
          total_mutexes=$(node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('public/data/malware.json', 'utf8'));
            const total = data.malware.reduce((sum, m) => sum + m.mutexes.length, 0);
            console.log(total);
          ")
          
          # Save statistics to file
          cat > ../stats.json << EOF
          {
            "total_yaml": $total_yaml,
            "total_rats": $total_rats,
            "total_trojans": $total_trojans,
            "total_ransomware": $total_ransomware,
            "total_other": $total_other,
            "total_mutexes": $total_mutexes,
            "last_updated": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          }
          EOF

      - name: Update README badges
        run: |
          # Read statistics
          stats=$(cat stats.json)
          total_yaml=$(echo $stats | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).total_yaml)")
          total_mutexes=$(echo $stats | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).total_mutexes)")
          last_updated=$(echo $stats | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).last_updated)")
          
          # Generate badges
          ci_cd_badge="![CI/CD Pipeline](https://github.com/${{ github.repository }}/actions/workflows/ci-cd.yml/badge.svg)"
          pr_validation_badge="![PR Validation](https://github.com/${{ github.repository }}/actions/workflows/pr-validation.yml/badge.svg)"
          malware_count_badge="![Malware Families](https://img.shields.io/badge/Malware%20Families-${total_yaml}-red)"
          mutex_count_badge="![Total Mutexes](https://img.shields.io/badge/Total%20Mutexes-${total_mutexes}-blue)"
          cloudflare_badge="![Hosted on Cloudflare](https://img.shields.io/badge/Hosted%20on-Cloudflare%20Pages-orange)"
          
          # Update README.md
          # First, let's check if README has a badges section
          if ! grep -q "<!-- BADGES START -->" README.md; then
            # Add badges section after the first header
            sed -i '1 a\\n<!-- BADGES START -->\n<!-- BADGES END -->' README.md
          fi
          
          # Replace badges section
          sed -i '/<!-- BADGES START -->/,/<!-- BADGES END -->/c\
          <!-- BADGES START -->\
          '"$ci_cd_badge"' \
          '"$pr_validation_badge"' \
          '"$malware_count_badge"' \
          '"$mutex_count_badge"' \
          '"$cloudflare_badge"'\
          \
          **Last Updated:** '"$last_updated"'\
          <!-- BADGES END -->' README.md

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README with latest statistics and badges"
          git push 