name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-yaml:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'

      - name: Install dependencies
        run: |
          cd website
          npm ci

      - name: Validate YAML files
        run: |
          echo "Validating YAML files..."
          find signatures/ -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Validating: $file"
            npx yaml-lint "$file" || exit 1
          done
          echo "All YAML files are valid!"

      - name: Test build process
        run: |
          echo "Testing integrated build process..."
          cd website
          npm run generate
          echo "Build process completed successfully!"

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: validate-yaml
    # Only run on push to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'

      - name: Install dependencies
        run: |
          cd website
          npm ci

      - name: Build Nuxt.js application with integrated data
        run: |
          echo "Building Nuxt.js application with integrated data processing..."
          cd website
          npm run generate

      - name: Generate IndexNow key file
        run: |
          echo "🔑 Generating IndexNow key file..."
          INDEXNOW_KEY="${{ vars.INDEXNOW_KEY }}"
          
          # Create the key file in the dist directory
          echo "$INDEXNOW_KEY" > "website/dist/${INDEXNOW_KEY}.txt"
          
          echo "✅ IndexNow key file generated: ${INDEXNOW_KEY}.txt"

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=${{ vars.CLOUDFLARE_PROJECT_NAME }}
          workingDirectory: website

      - name: Submit URLs to IndexNow
        run: |
          echo "🔄 Submitting URLs to IndexNow..."
          
          # Use GitHub Actions variables
          INDEXNOW_KEY="${{ vars.INDEXNOW_KEY }}"
          DOMAIN="${{ vars.DOMAIN }}"
          
          # Base URLs that always get submitted
          BASE_URLS=(
            "https://${DOMAIN}/"
            "https://${DOMAIN}/contributor"
          )
          
          # Get dynamic malware URLs from generated sitemap
          cd website
          MALWARE_URLS=($(grep -oP '(?<=<loc>)[^<]*(?=</loc>)' dist/sitemap.xml | grep "/malware/" || true))
          
          # Combine all URLs
          ALL_URLS=("${BASE_URLS[@]}" "${MALWARE_URLS[@]}")
          
          # Create JSON array of URLs
          URL_JSON=$(printf '%s\n' "${ALL_URLS[@]}" | jq -R . | jq -s .)
          
          # Submit to IndexNow (Bing/Microsoft)
          echo "📤 Submitting $(echo "$URL_JSON" | jq length) URLs to IndexNow..."
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.indexnow.org/indexnow" \
            -H "Content-Type: application/json" \
            -d "{
              \"host\": \"${DOMAIN}\",
              \"key\": \"${INDEXNOW_KEY}\",
              \"keyLocation\": \"https://${DOMAIN}/${INDEXNOW_KEY}.txt\",
              \"urlList\": ${URL_JSON}
            }")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ IndexNow submission successful!"
            echo "Response: $RESPONSE_BODY"
          else
            echo "⚠️ IndexNow submission returned HTTP $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
          fi
          
          # Also submit to Yandex (alternative endpoint)
          echo "📤 Submitting to Yandex IndexNow..."
          
          YANDEX_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://yandex.com/indexnow" \
            -H "Content-Type: application/json" \
            -d "{
              \"host\": \"${DOMAIN}\",
              \"key\": \"${INDEXNOW_KEY}\",
              \"keyLocation\": \"https://${DOMAIN}/${INDEXNOW_KEY}.txt\",
              \"urlList\": ${URL_JSON}
            }")
          
          YANDEX_HTTP_CODE=$(echo "$YANDEX_RESPONSE" | tail -n1)
          YANDEX_RESPONSE_BODY=$(echo "$YANDEX_RESPONSE" | head -n -1)
          
          if [ "$YANDEX_HTTP_CODE" = "200" ]; then
            echo "✅ Yandex IndexNow submission successful!"
          else
            echo "⚠️ Yandex IndexNow submission returned HTTP $YANDEX_HTTP_CODE"
          fi
          
          echo "🎯 IndexNow submissions completed!"

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [validate-yaml, deploy]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## EvilMutex CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### YAML Validation: ${{ needs.validate-yaml.result }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "### Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Deployment: Skipped (PR only)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY 